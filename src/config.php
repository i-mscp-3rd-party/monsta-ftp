<?php
/**
 * MonstaFTP configuration file - auto-generated by i-MSCP
 *     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
 *
 * You can override this configuration file with the help of an event listener
 * listening on the i-MSCP backend 'onLoadTemplate' event. For instance:
 *
 * Perl code:
 *
 * Package Listener::MonstaFTP::CustomConfigFile;
 *
 * use strict;
 * use warnings;
 * use iMSCP::EventManager;
 * use iMSCP::File;
 *
 * iMSCP::EventManager->getInstance()->register('onLoadTemplate', sub {
 *   my ($target, $cfgTplName, $cfgTplContent) = @_;
 *
 *   # We do not want act if the target isn't MonstaFTP, or if the
 *   # configuration file isn't the main configuration file.
 *   return 0 unless lc $target eq 'monstaftp' && $cfgTplName eq 'config.php';
 *
 *   # Load custom MonstaFTP configuration file into the $cfgTplContent
 *   #Â variable.
 *   return 1 unless defined( ${ $cfgTplContent } = iMSCP::File->new(
 *     filename => 'path/to/your/monstaftp/conf/file'
 *   )->get() );
 *
 *   0;
 * });
 *
 * 1;
 * __END__
 *
 * The code above has to be put in an i-MSCP listener file which needs to be
 * saved into the /etc/imscp/listeners.d directory. See the contrib directory
 * of the i-MSCP distribution for further details and/or examples about i-MSCP
 * listener files.
 */

$configPathSettings = dirname(__FILE__) . "/settings.json";
$configTimeZone = "{TIMEZONE}";
$configTempDir = "{TMP_DIR}";
$configMaxFileSize = "128M";
$configChunkUploadSize = "default";
$configMaxExecutionTimeSeconds = 120;
$configSSHAgentAuthEnabled = false;
$configSSHKeyAuthEnabled = false;
$configPageTitle = "Monsta FTP";
$configMaxLoginFailures = 3;
$configLoginFailuresResetTimeMinutes = 5;
$configMftpActionLogPath = null;
$configMftpActionLogFunction = null;
$configLogToSyslog = false;
$configMftpSyslogFacility = LOG_USER;
$configLogToFile = false;
$configMftpLogFilePath = NULL;
$configMftpLogLevelThreshold = LOG_WARNING;
$configDisableLatestVersionCheck = false;

define("APPLICATION_SETTINGS_PATH", $configPathSettings);
define("MONSTA_TEMP_DIRECTORY", $configTempDir);
define("SSH_AGENT_AUTH_ENABLED", $configSSHAgentAuthEnabled);
define("SSH_KEY_AUTH_ENABLED", $configSSHKeyAuthEnabled);
define("MFTP_PAGE_TITLE", $configPageTitle);
define("MFTP_MAX_LOGIN_FAILURES", $configMaxLoginFailures);
define("MFTP_LOGIN_FAILURES_RESET_TIME_MINUTES", $configLoginFailuresResetTimeMinutes);
define("MFTP_ACTION_LOG_PATH", $configMftpActionLogPath);
define("MFTP_ACTION_LOG_FUNCTION", $configMftpActionLogFunction);
define("MFTP_LOG_TO_SYSLOG", $configLogToSyslog);
define("MFTP_LOG_SYSLOG_FACILITY", $configMftpSyslogFacility);
define("MFTP_LOG_TO_FILE", $configLogToFile);
define("MFTP_LOG_FILE_PATH", $configMftpLogFilePath);
define("MFTP_LOG_LEVEL_THRESHOLD", $configMftpLogLevelThreshold);
define("MFTP_DISABLE_LATEST_VERSION_CHECK", $configDisableLatestVersionCheck);

date_default_timezone_set($configTimeZone);

$currentMemoryLimitFormatted = ini_get('memory_limit');
$currentMemoryLimit = formattedSizeToBytes($currentMemoryLimitFormatted);
$maxUploadSizeBytes = formattedSizeToBytes($configMaxFileSize);

if ($currentMemoryLimit != -1 && $maxUploadSizeBytes > $currentMemoryLimit) {
    ini_set('memory_limit', $configMaxFileSize);
}

define("MFTP_MAX_UPLOAD_SIZE", $maxUploadSizeBytes);

define("MFTP_CHUNK_UPLOAD_SIZE", $configChunkUploadSize);

ini_set('max_execution_time', $configMaxExecutionTimeSeconds);

$proConfigurationPath = dirname(__FILE__) . "/../license/config_pro.php";

if (file_exists($proConfigurationPath))
    require_once($proConfigurationPath);
else {
    define("AUTHENTICATION_FILE_PATH", "");
    define("MONSTA_LICENSE_PATH", "");
}

define("MONSTA_UPLOAD_LOGGING", false);
